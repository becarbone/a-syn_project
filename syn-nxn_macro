//made by Bea Carbone - 2016
var color,  sourceSyndir, sourceSynSub, maskDir, zipDir, nxnInt, totalsynArea;
var areaROIarray, areaSynarray, synArea, synColor, synThresh;
var overArea, nxnColor, sourceNxndir, sourceNxnSub, nxnThresh;

waitForUser("Image files must be saved with subfolders for each condition.");

color = newArray("Green", "Red", "Blue", "Cyan");
Dialog.create("");
	Dialog.addChoice("Channel with a-syn", color, "Cyan");
	Dialog.addChoice("Channel with HA-Nrx", color, "Red");
Dialog.show;

synColor = Dialog.getChoice();
nxnColor = Dialog.getChoice();

sourceSyndir = getDirectory("Choose folder for " + synColor +" source images");
sourceSynList = getFileList(sourceSyndir);
sourceNxndir = getDirectory("Choose folder for " + nxnColor +" source images");
sourceNxnList = getFileList(sourceNxndir);

if(File.isDirectory(sourceSynList[0])==1){
	exit("Please restructure your files to have nested folders with the different conditions");
}

maskDir = getDirectory("Choose folder for masks");
zipDir = getDirectory("Choose folder to save ROI information in");


Dialog.create("Threshold info");
	Dialog.addNumber("For "+ synColor,0);
	Dialog.addNumber("For "+ nxnColor,0);
Dialog.show;

synThresh = Dialog.getNumber();
nxnThresh = Dialog.getNumber();

run("Set Measurements...", "area integrated area_fraction limit redirect=None decimal=3");

ROIstring = "Image	area of a-syn(um^2)	area of Nxn	NxnIntensity	%coverage a-syn/Nxn	\n";

//enter thresholding values for two channels for mask settings 
p=0;
while(p<(sourceNxnList.length))	{
	sourceSynSub = getFileList(sourceSyndir+sourceSynList[p]);
	sourceNxnSub = getFileList(sourceNxndir+sourceNxnList[p]);
	if(File.exists(zipDir+sourceNxnList[p])!=1){
		File.makeDirectory(zipDir+sourceNxnList[p]);
	}
	ROIstring = ROIstring+sourceSynList[p]+"\n";
	for(l=0;l<sourceNxnSub.length;l++)	{
		//check and see if both nxn and a-syn files exists + open them if they do
		conditionNxn = getFileList(sourceNxndir+sourceNxnList[p]+sourceNxnSub[l]);
		conditionSyn = getFileList(sourceSyndir+sourceSynList[p]+sourceSynSub[l]);
		imgName = File.getName(sourceSyndir+sourceNxnList[p]+sourceNxnSub[p]);
		temp = substring(imgName,0,(lengthOf(imgName)-(lengthOf(nxnColor)+5)));
		imgName = temp;
		roiManager("reset");
		if((File.exists(sourceNxndir+sourceNxnList[p]+imgName+"_"+nxnColor+".tif") && File.exists(sourceSyndir+sourceSynList[p]+imgName+"_"+synColor+".tif")) == true)	{
			conditionNxn = getFileList(sourceNxndir+sourceNxnList[p]+sourceNxnSub[l]);
			conditionSyn = getFileList(sourceSyndir+sourceSynList[p]+sourceSynSub[l]);
			imgName = File.getName(sourceNxndir+sourceNxnSub[l]);
			temp = substring(imgName,0,(lengthOf(imgName)-(lengthOf(nxnColor)+5)));
			imgName = temp;
			//change names
			open(sourceNxndir+sourceNxnList[p]+sourceNxnSub[l]);
			run("Properties...", "channels=1 slices=1 frames=1 unit=micron pixel_width=0.1803752 pixel_height=0.1803752 voxel_depth=0.2092750");
			rename("Nxn");
			run("Duplicate...", "duplicate");
			selectImage("Nxn-1");
			rename("Nxn-unmask");
			open(sourceSyndir+sourceSynList[p]+sourceSynSub[l]);
			run("Properties...", "channels=1 slices=1 frames=1 unit=micron pixel_width=0.1803752 pixel_height=0.1803752 voxel_depth=0.2092750");
			rename("Syn");
	
			//create mask for a-syn
			run("Clear Results");
			selectImage("Syn");
			run("Grays");
			run("32-bit");
			setThreshold(synThresh, 255);
			run("Convert to Mask");
			run("Convert to Mask");
			rename("Syn-mask");
			run("Make Binary");
			run("Create Selection");
			run("Measure");
			totalsynArea = 0;
			if(getResult("Area")>0)	{
				roiManager("Add");
				synArea = getResult("Area");
				totalsynArea = totalsynArea + synArea;
			}
			roiManager("Save", zipDir + sourceNxnList[p] + imgName +"_ROI.zip");
			selectImage("Syn-mask");
			saveAs("Tiff", maskDir+imgName+"_"+synColor);
			close();
	
			//create mask for nxn
			roiManager("reset");
			run("Clear Results");
			selectImage("Nxn");
			run("Grays");
			run("32-bit");
			setThreshold(nxnThresh, 255);
			run("Convert to Mask");
			run("Convert to Mask");
			rename("Nxn-mask");
			run("Make Binary");
			run("Create Selection");
			run("Measure");
			if(getResult("Area")>0)	{
				roiManager("Add");
				nxnArea = getResult("Area");
			}
			selectImage("Nxn-unmask");
			run("Measure");
			if(getResult("Area")>0)	{
				nxnInt = getResult("IntDen");
			}
			run("Clear Results");
			selectImage("Nxn-mask");
			roiManager("reset");
			roiManager("open", zipDir + sourceNxnList[p] + imgName +"_ROI.zip");
			roiManager("measure");
			saveAs("Tiff", maskDir+imgName+"_"+nxnColor);
			overArea = 0;
			for(q=0;q<nResults;q++){
				overArea = overArea+getResult("Area");
			}
			close();
			selectImage("Nxn-unmask");
			close();
			ROIstring = ROIstring + imgName + "	" +  synArea+ "	" +overArea + "	" + nxnInt + "	" +((overArea/totalsynArea)*100)+ "\n";	
		}
	}
	p = p+1;
}
File.saveString(ROIstring, maskDir+"AreaCalc.xls");
print(ROIstring);
